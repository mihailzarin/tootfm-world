const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function setupEverything() {
  console.log('üöÄ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å—ë –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...\n');
  
  try {
    // 1. –ù–∞—Ö–æ–¥–∏–º —Ç–≤–æ–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findFirst({
      where: { 
        email: { contains: '@' } 
      },
      include: {
        musicProfile: true
      }
    });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏ —á–µ—Ä–µ–∑ Google!');
      return;
    }
    
    console.log(`‚úÖ –ù–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.name || user.email}`);
    console.log(`   ID: ${user.id}`);
    console.log(`   –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: ${user.musicProfile ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
    
    // 2. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é party
    const partyCode = 'DEMO' + Math.floor(Math.random() * 100);
    
    const party = await prisma.party.create({
      data: {
        code: partyCode,
        name: 'Test Music Party üéµ',
        description: '–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤',
        creatorId: user.id,
        isActive: true,
        maxMembers: 50,
        votingEnabled: false,
        partyRadio: false
      }
    });
    
    console.log(`\n‚úÖ –°–æ–∑–¥–∞–ª–∏ party: ${party.name}`);
    console.log(`   –ö–æ–¥: ${party.code}`);
    
    // 3. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–±—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    await prisma.partyMember.create({
      data: {
        partyId: party.id,
        userId: user.id,
        role: 'HOST'
      }
    });
    
    console.log('‚úÖ –î–æ–±–∞–≤–∏–ª–∏ —Ç–µ–±—è –∫–∞–∫ HOST\n');
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å—ë –≥–æ—Ç–æ–≤–æ
    if (user.musicProfile && user.musicProfile.unifiedTopTracks) {
      console.log('üéâ –í–°–Å –ì–û–¢–û–í–û!');
      console.log('üìç –û—Ç–∫—Ä–æ–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
      console.log(`   http://localhost:3000/party/${party.code}`);
      console.log('\nüí° –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ party –Ω–∞–∂–º–∏ "Generate Playlist"');
    } else {
      console.log('‚ö†Ô∏è  –£ —Ç–µ–±—è –Ω–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!');
      console.log('üìç –ß—Ç–æ –¥–µ–ª–∞—Ç—å:');
      console.log('   1. –û—Ç–∫—Ä–æ–π http://localhost:3000/profile');
      console.log('   2. –ù–∞–∂–º–∏ "Analyze Music" –∏–ª–∏ "Refresh"');
      console.log('   3. –ü–æ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É party');
      console.log(`\nüìç –°—Å—ã–ª–∫–∞ –Ω–∞ party:`);
      console.log(`   http://localhost:3000/party/${party.code}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.message.includes('Unique constraint')) {
      console.log('\nüí° –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –µ—â—ë —Ä–∞–∑');
    }
  } finally {
    await prisma.$disconnect();
  }
}

setupEverything();
