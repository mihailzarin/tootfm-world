generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  worldId       String?        @unique
  verified      Boolean        @default(false)
  displayName   String?
  avatar        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  email         String?        @unique
  emailVerified DateTime?
  googleId      String?        @unique
  image         String?
  name          String?
  spotifyId     String?        @unique
  accounts      Account[]
  musicProfile  MusicProfile?
  musicServices MusicService[]
  parties       Party[]        @relation("PartyCreator")
  memberships   PartyMember[]
  sessions      Session[]
  votes         Vote[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MusicProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  unifiedTopTracks  Json?
  unifiedTopArtists Json?
  unifiedTopGenres  Json?
  spotifyData       Json?
  lastfmData        Json?
  appleData         Json?
  musicPersonality  String?
  dominantGenres    Json?
  energyLevel       Float?
  diversityScore    Float?
  mainstreamScore   Float?
  lastAnalyzed      DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MusicService {
  id             String      @id @default(cuid())
  userId         String
  service        ServiceType
  spotifyId      String?
  accessToken    String?
  refreshToken   String?
  tokenExpiry    DateTime?
  lastfmUsername String?
  lastfmSession  String?
  appleUserId    String?
  appleToken     String?
  isActive       Boolean     @default(true)
  lastSynced     DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, service])
  @@index([userId])
  @@index([service])
}

model Party {
  id                String        @id @default(cuid())
  code              String        @unique
  name              String
  description       String?
  isActive          Boolean       @default(true)
  creatorId         String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  applePlaylistId   String?
  maxMembers        Int           @default(50)
  partyRadio        Boolean       @default(false)
  playlistData      Json?
  playlistGenerated Boolean       @default(false)
  spotifyPlaylistId String?
  totalMembers      Int           @default(1)
  totalTracks       Int           @default(0)
  totalVotes        Int           @default(0)
  votingEnabled     Boolean       @default(false)
  creator           User          @relation("PartyCreator", fields: [creatorId], references: [id])
  members           PartyMember[]
  tracks            Track[]

  @@index([code])
  @@index([creatorId])
}

model PartyMember {
  id                String     @id @default(cuid())
  userId            String
  partyId           String
  joinedAt          DateTime   @default(now())
  contributionScore Float?
  role              MemberRole @default(MEMBER)
  party             Party      @relation(fields: [partyId], references: [id], onDelete: Cascade)
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([partyId, userId])
  @@index([partyId])
  @@index([userId])
}

model Track {
  id         String   @id @default(cuid())
  spotifyId  String?
  name       String
  artist     String
  album      String?
  albumArt   String?
  duration   Int
  partyId    String
  voteCount  Int      @default(0)
  appleId    String?
  createdAt  DateTime @default(now())
  isrc       String?
  lastfmMbid String?
  matchScore Float
  position   Int
  previewUrl String?
  sources    Json
  party      Party    @relation(fields: [partyId], references: [id], onDelete: Cascade)
  votes      Vote[]

  @@index([partyId, position])
  @@index([isrc])
  @@index([spotifyId])
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  trackId   String
  value     Int
  createdAt DateTime @default(now())
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId])
  @@index([userId])
  @@index([trackId])
}

enum ServiceType {
  SPOTIFY
  LASTFM
  APPLE
}

enum MemberRole {
  HOST
  MEMBER
}
