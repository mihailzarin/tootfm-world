generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?  // –ê–≤–∞—Ç–∞—Ä –∏–∑ Google
  googleId      String   @unique
  worldId       String?  @unique  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // –°–≤—è–∑–∏
  musicProfile  MusicProfile?
  musicServices MusicService[]
  parties       Party[]       @relation("PartyCreator")
  memberships   PartyMember[]
  votes         Vote[]
}

model MusicProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  
  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  unifiedTopTracks    Json?    // –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–ø —Ç—Ä–µ–∫–∏
  unifiedTopArtists   Json?    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Ç–æ–ø –∞—Ä—Ç–∏—Å—Ç—ã
  unifiedTopGenres    Json?    // –í–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∂–∞–Ω—Ä—ã
  
  // –î–∞–Ω–Ω—ã–µ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º (–∫—ç—à)
  spotifyData         Json?    // top-tracks, top-artists, saved
  lastfmData          Json?    // loved, top-albums, top-artists
  appleData           Json?    // heavy-rotation, recent-played
  
  // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
  musicPersonality    String?  // "Eclectic Explorer üåê"
  dominantGenres      Json?    // ["indie rock", "electronic"]
  energyLevel         Float?   // 0-100
  diversityScore      Float?   // 0-100
  mainstreamScore     Float?   // 0-100
  
  lastAnalyzed        DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model MusicService {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  
  service       ServiceType  // SPOTIFY, LASTFM, APPLE
  
  // Spotify —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
  spotifyId     String?
  accessToken   String?  @db.Text // –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π
  refreshToken  String?  @db.Text // –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π
  tokenExpiry   DateTime?
  
  // Last.fm —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
  lastfmUsername String?
  lastfmSession  String?  // Session key
  
  // Apple Music —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
  appleUserId    String?
  appleToken     String?  @db.Text
  
  // –û–±—â–∏–µ –ø–æ–ª—è
  isActive       Boolean  @default(true)
  lastSynced     DateTime?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@unique([userId, service])
}

enum ServiceType {
  SPOTIFY
  LASTFM
  APPLE
}

model Party {
  id            String   @id @default(cuid())
  code          String   @unique // 6-—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥
  name          String
  description   String?
  
  creatorId     String
  creator       User     @relation("PartyCreator", fields: [creatorId], references: [id])
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  isActive      Boolean  @default(true)
  maxMembers    Int      @default(50)
  votingEnabled Boolean  @default(false) // –¢—Ä–µ–±—É–µ—Ç World ID
  partyRadio    Boolean  @default(false) // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
  
  // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
  playlistGenerated Boolean @default(false)
  playlistData      Json?   // –ö—ç—à —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
  spotifyPlaylistId String? // ID —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
  applePlaylistId   String? // ID —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  totalMembers  Int      @default(1)
  totalTracks   Int      @default(0)
  totalVotes    Int      @default(0)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // –°–≤—è–∑–∏
  members       PartyMember[]
  tracks        Track[]
}

model PartyMember {
  id        String   @id @default(cuid())
  
  partyId   String
  party     Party    @relation(fields: [partyId], references: [id])
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  role      MemberRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  
  // –í–∫–ª–∞–¥ –≤ –ø–ª–µ–π–ª–∏—Å—Ç
  contributionScore Float? // –ù–∞—Å–∫–æ–ª—å–∫–æ —É—á—Ç–µ–Ω—ã –≤–∫—É—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞
  
  @@unique([partyId, userId])
}

enum MemberRole {
  HOST
  MEMBER
}

model Track {
  id            String   @id @default(cuid())
  
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  isrc          String?  // International Standard Recording Code
  spotifyId     String?
  appleId       String?
  lastfmMbid    String?  // MusicBrainz ID
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  name          String
  artist        String
  album         String?
  albumArt      String?
  duration      Int      // –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
  previewUrl    String?  // 30-—Å–µ–∫ –ø—Ä–µ–≤—å—é
  
  // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ (–æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª —Ç—Ä–µ–∫)
  sources       Json     // ["spotify:user1", "lastfm:user2", "apple:user3"]
  matchScore    Float    // –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤—Å–µ–º (0-100)
  
  // Party —Å–≤—è–∑—å
  partyId       String
  party         Party    @relation(fields: [partyId], references: [id])
  
  // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
  voteCount     Int      @default(0)
  votes         Vote[]
  
  // –ü–æ–∑–∏—Ü–∏—è –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ
  position      Int
  
  createdAt     DateTime @default(now())
  
  @@index([partyId, position])
  @@index([isrc])
}

model Vote {
  id        String   @id @default(cuid())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id])
  
  value     Int      // +1 –∏–ª–∏ -1
  
  createdAt DateTime @default(now())
  
  @@unique([userId, trackId])
}