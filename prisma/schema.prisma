generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Пользователь с World ID
model User {
  id              String    @id @default(cuid())
  worldId         String    @unique
  credentialType  String?
  displayName     String?
  avatar          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  musicAccounts   MusicServiceAccount[]
  musicProfile    MusicProfile?
  hostedParties   Party[]   @relation("PartyHost")
  participations  Participant[]
  votes          Vote[]
}

// Подключенные музыкальные аккаунты
model MusicServiceAccount {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  service         MusicService
  serviceUserId   String
  accessToken     String?   @db.Text
  refreshToken    String?   @db.Text
  tokenExpiry     DateTime?
  
  displayName     String?
  email          String?
  isPremium      Boolean   @default(false)
  
  lastSyncedAt   DateTime?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  @@unique([userId, service])
}

enum MusicService {
  SPOTIFY
  APPLE_MUSIC
  YOUTUBE_MUSIC
}

// Музыкальный профиль пользователя
model MusicProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  
  genreWeights    Json      @default("{}")
  avgEnergy       Float?
  avgDanceability Float?
  avgValence      Float?
  avgTempo        Float?
  
  preferredEras   String[]
  languages       String[]
  
  lastUpdatedAt   DateTime  @default(now())
}

// Party (музыкальная сессия)
model Party {
  id              String    @id @default(cuid())
  name            String
  code            String    @unique @default(cuid())
  hostId          String
  host            User      @relation("PartyHost", fields: [hostId], references: [id])
  
  status          PartyStatus @default(WAITING)
  maxParticipants Int       @default(50)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  endedAt         DateTime?
  
  participants    Participant[]
  playlist        PlaylistTrack[]
  votes          Vote[]
}

enum PartyStatus {
  WAITING
  ACTIVE
  PAUSED
  ENDED
}

// Участник party
model Participant {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  partyId   String
  party     Party     @relation(fields: [partyId], references: [id])
  joinedAt  DateTime  @default(now())
  isActive  Boolean   @default(true)
  
  @@unique([userId, partyId])
}

// Трек в плейлисте
model PlaylistTrack {
  id            String    @id @default(cuid())
  partyId       String
  party         Party     @relation(fields: [partyId], references: [id])
  
  title         String
  artist        String
  album         String?
  duration      Int
  
  spotifyId     String?
  appleMusicId  String?
  youtubeId     String?
  
  imageUrl      String?
  position      Int       @default(0)
  status        TrackStatus @default(QUEUED)
  voteCount     Int       @default(0)
  
  addedAt       DateTime  @default(now())
  playedAt      DateTime?
  
  votes         Vote[]
  
  @@index([partyId, status, position])
}

enum TrackStatus {
  QUEUED
  PLAYING
  PLAYED
  SKIPPED
}

// Голосование
model Vote {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  trackId   String
  track     PlaylistTrack @relation(fields: [trackId], references: [id])
  partyId   String
  party     Party     @relation(fields: [partyId], references: [id])
  
  value     Int       @default(1)
  createdAt DateTime  @default(now())
  
  @@unique([userId, trackId])
}
