// app/api/music/lastfm/callback/route.ts
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –æ—Ç Last.fm —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö

import { NextRequest, NextResponse } from 'next/server';
import crypto from 'crypto';

const LASTFM_API_SECRET = process.env.LASTFM_API_SECRET!;
const LASTFM_API_KEY = process.env.LASTFM_API_KEY!;

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç MD5 –ø–æ–¥–ø–∏—Å—å –¥–ª—è Last.fm API
 */
function generateApiSig(params: Record<string, string>): string {
  const sortedKeys = Object.keys(params).sort();
  let sigString = '';
  
  for (const key of sortedKeys) {
    if (key !== 'format' && key !== 'callback') {
      sigString += key + params[key];
    }
  }
  
  sigString += LASTFM_API_SECRET;
  return crypto.createHash('md5').update(sigString, 'utf8').digest('hex');
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç session key –æ—Ç Last.fm
 */
async function getSessionKey(token: string) {
  try {
    const params: Record<string, string> = {
      method: 'auth.getSession',
      api_key: LASTFM_API_KEY,
      token: token
    };
    
    const apiSig = generateApiSig(params);
    params.api_sig = apiSig;
    params.format = 'json';
    
    const url = new URL('https://ws.audioscrobbler.com/2.0/');
    Object.entries(params).forEach(([key, value]) => {
      url.searchParams.append(key, value);
    });
    
    console.log('üîó Requesting Last.fm session...');
    
    const response = await fetch(url.toString());
    const data = await response.json();
    
    if (!response.ok || data.error) {
      console.error('‚ùå Last.fm API error:', data);
      throw new Error(data.message || 'Failed to get session');
    }
    
    console.log('‚úÖ Session received for user:', data.session?.name);
    
    return {
      sessionKey: data.session.key,
      username: data.session.name
    };
  } catch (error) {
    console.error('‚ùå Error getting session key:', error);
    throw error;
  }
}

/**
 * GET –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback –æ—Ç Last.fm
 */
export async function GET(request: NextRequest) {
  console.log('üéµ Last.fm callback received');
  
  try {
    const searchParams = request.nextUrl.searchParams;
    const token = searchParams.get('token');
    
    if (!token) {
      console.error('‚ùå No token in callback');
      return NextResponse.redirect(
        new URL('/profile?error=lastfm_no_token', request.url)
      );
    }
    
    console.log('üîë Processing token...');
    
    // –ü–æ–ª—É—á–∞–µ–º session key –æ—Ç Last.fm
    const { sessionKey, username } = await getSessionKey(token);
    
    // –°–æ–∑–¥–∞–µ–º response —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'https://tootfm.world';
    const response = NextResponse.redirect(
      new URL('/profile?lastfm=connected&tab=services', baseUrl)
    );
    
    // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Last.fm –≤ cookies –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    
    // Session key –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ (httpOnly –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    response.cookies.set('lastfm_session', sessionKey, {
      httpOnly: true,
      secure: true,
      sameSite: 'lax',
      maxAge: 60 * 60 * 24 * 365, // 1 –≥–æ–¥
      path: '/'
    });
    
    // Username –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
    response.cookies.set('lastfm_username', username, {
      httpOnly: false, // –ú–æ–∂–µ–º —á–∏—Ç–∞—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      secure: true,
      sameSite: 'lax',
      maxAge: 60 * 60 * 24 * 365,
      path: '/'
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = {
      username,
      connected: true,
      connectedAt: new Date().toISOString()
    };
    
    response.cookies.set('lastfm_user', JSON.stringify(userData), {
      httpOnly: false,
      secure: true,
      sameSite: 'lax',
      maxAge: 60 * 60 * 24 * 365,
      path: '/'
    });
    
    console.log('‚úÖ Last.fm connected successfully:', {
      username,
      cookiesSet: ['lastfm_session', 'lastfm_username', 'lastfm_user']
    });
    
    return response;
    
  } catch (error) {
    console.error('‚ùå Last.fm callback error:', error);
    
    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'https://tootfm.world';
    return NextResponse.redirect(
      new URL('/profile?error=lastfm_connection_failed', baseUrl)
    );
  }
}