// app/api/lastfm/callback/route.ts
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –æ—Ç Last.fm

import { NextRequest, NextResponse } from 'next/server';
import crypto from 'crypto';

// –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á Last.fm –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const LASTFM_API_SECRET = process.env.LASTFM_API_SECRET!;
const LASTFM_API_KEY = process.env.LASTFM_API_KEY!;

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç MD5 –ø–æ–¥–ø–∏—Å—å –¥–ª—è Last.fm API
 * @param params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–±–µ–∑ api_sig)
 * @returns MD5 —Ö–µ—à —Å—Ç—Ä–æ–∫–∏
 */
function generateApiSig(params: Record<string, string>): string {
  // 1. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–ª—é—á–∞–º –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  const sortedKeys = Object.keys(params).sort();
  
  // 2. –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
  let sigString = '';
  for (const key of sortedKeys) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º format –∏ callback –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–æ–Ω–∏ –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –ø–æ–¥–ø–∏—Å–∏)
    if (key !== 'format' && key !== 'callback') {
      sigString += key + params[key];
    }
  }
  
  // 3. –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤ –∫–æ–Ω–µ—Ü
  sigString += LASTFM_API_SECRET;
  
  // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º MD5 —Ö–µ—à
  const hash = crypto.createHash('md5').update(sigString, 'utf8').digest('hex');
  
  console.log('üìù Signature generation:', {
    params: sortedKeys.map(k => `${k}=${params[k]}`).join(', '),
    sigString: sigString.substring(0, 50) + '...', // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    hash
  });
  
  return hash;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç session key –æ—Ç Last.fm –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param token - –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç Last.fm
 * @returns Session key –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getSessionKey(token: string) {
  try {
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ session
    const params: Record<string, string> = {
      method: 'auth.getSession',
      api_key: LASTFM_API_KEY,
      token: token
    };
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
    const apiSig = generateApiSig(params);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    params.api_sig = apiSig;
    params.format = 'json'; // –î–æ–±–∞–≤–ª—è–µ–º format –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const url = new URL('https://ws.audioscrobbler.com/2.0/');
    Object.entries(params).forEach(([key, value]) => {
      url.searchParams.append(key, value);
    });
    
    console.log('üîó Requesting session from Last.fm:', url.toString());
    
    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Last.fm API
    const response = await fetch(url.toString(), {
      method: 'GET',
      headers: {
        'User-Agent': 'tootFM/1.0'
      }
    });
    
    const data = await response.json();
    
    if (!response.ok || data.error) {
      console.error('‚ùå Last.fm API error:', data);
      throw new Error(data.message || 'Failed to get session');
    }
    
    console.log('‚úÖ Session received:', {
      username: data.session?.name,
      key: data.session?.key?.substring(0, 10) + '...'
    });
    
    return {
      sessionKey: data.session.key,
      username: data.session.name
    };
  } catch (error) {
    console.error('‚ùå Error getting session key:', error);
    throw error;
  }
}

/**
 * GET –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback –æ—Ç Last.fm
 * Last.fm –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç —Å—é–¥–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function GET(request: NextRequest) {
  console.log('üéµ Last.fm callback received');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º token –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const searchParams = request.nextUrl.searchParams;
    const token = searchParams.get('token');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (!token) {
      console.error('‚ùå No token in callback');
      return NextResponse.redirect(
        new URL('/profile?error=lastfm_no_token', request.url)
      );
    }
    
    console.log('üîë Token received:', token.substring(0, 10) + '...');
    
    // –ü–æ–ª—É—á–∞–µ–º session key –æ—Ç Last.fm
    const { sessionKey, username } = await getSessionKey(token);
    
    // TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å sessionKey –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cookies –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    // –°–æ–∑–¥–∞–µ–º response —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
    const response = NextResponse.redirect(
      new URL('/profile?lastfm=connected', request.url)
    );
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies —Å –¥–∞–Ω–Ω—ã–º–∏ Last.fm
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JWT —Ç–æ–∫–µ–Ω –∏ —Ö—Ä–∞–Ω–∏—Ç–µ –≤ –ë–î
    response.cookies.set('lastfm_session', sessionKey, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 60 * 60 * 24 * 30, // 30 –¥–Ω–µ–π
      path: '/'
    });
    
    response.cookies.set('lastfm_username', username, {
      httpOnly: false, // –ú–æ–∂–µ–º —á–∏—Ç–∞—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 60 * 60 * 24 * 30,
      path: '/'
    });
    
    console.log('‚úÖ Last.fm connected successfully for user:', username);
    
    return response;
    
  } catch (error) {
    console.error('‚ùå Last.fm callback error:', error);
    
    // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º —Å –æ—à–∏–±–∫–æ–π
    return NextResponse.redirect(
      new URL('/profile?error=lastfm_connection_failed', request.url)
    );
  }
}

/**
 * POST –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Last.fm
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
 */
export async function POST(request: NextRequest) {
  try {
    const response = NextResponse.json({ success: true });
    
    // –£–¥–∞–ª—è–µ–º cookies
    response.cookies.delete('lastfm_session');
    response.cookies.delete('lastfm_username');
    
    // TODO: –£–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    return response;
  } catch (error) {
    console.error('‚ùå Error disconnecting Last.fm:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to disconnect' },
      { status: 500 }
    );
  }
}