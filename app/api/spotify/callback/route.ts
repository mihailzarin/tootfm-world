// app/api/spotify/callback/route.ts
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π callback –¥–ª—è Spotify —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞

import { NextRequest, NextResponse } from "next/server";

export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  const code = searchParams.get("code");
  const error = searchParams.get("error");

  const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'https://tootfm.world';

  if (error) {
    console.error('‚ùå Spotify auth error:', error);
    return NextResponse.redirect(`${baseUrl}/profile?error=spotify_denied`);
  }

  if (!code) {
    console.error('‚ùå No code in Spotify callback');
    return NextResponse.redirect(`${baseUrl}/profile?error=no_code`);
  }

  try {
    console.log('üéµ Processing Spotify callback...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç Spotify
    const CLIENT_ID = process.env.SPOTIFY_CLIENT_ID!;
    const CLIENT_SECRET = process.env.SPOTIFY_CLIENT_SECRET!;
    const REDIRECT_URI = `${baseUrl}/api/spotify/callback`;
    
    console.log('üìù Token exchange params:', {
      client_id: CLIENT_ID?.substring(0, 10) + '...',
      redirect_uri: REDIRECT_URI
    });
    
    const tokenResponse = await fetch("https://accounts.spotify.com/api/token", {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        "Authorization": "Basic " + Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString("base64")
      },
      body: new URLSearchParams({
        grant_type: "authorization_code",
        code: code,
        redirect_uri: REDIRECT_URI,
      }),
    });

    if (!tokenResponse.ok) {
      const errorData = await tokenResponse.text();
      console.error("‚ùå Token exchange failed:", errorData);
      return NextResponse.redirect(`${baseUrl}/profile?error=token_failed`);
    }

    const tokenData = await tokenResponse.json();
    console.log('‚úÖ Token received, expires in:', tokenData.expires_in, 'seconds');

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profileResponse = await fetch("https://api.spotify.com/v1/me", {
      headers: {
        "Authorization": `Bearer ${tokenData.access_token}`
      },
    });

    if (!profileResponse.ok) {
      console.error('‚ùå Failed to fetch Spotify profile');
      return NextResponse.redirect(`${baseUrl}/profile?error=profile_failed`);
    }

    const profileData = await profileResponse.json();
    console.log('‚úÖ Spotify profile fetched:', profileData.display_name);

    // –°–æ–∑–¥–∞–µ–º response —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
    const response = NextResponse.redirect(`${baseUrl}/profile?spotify=connected&tab=services`);

    // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ cookies

    // 1. Access Token –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ (httpOnly –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    response.cookies.set("spotify_token", tokenData.access_token, {
      httpOnly: true,
      secure: true,
      sameSite: "lax",
      maxAge: tokenData.expires_in || 3600, // –û–±—ã—á–Ω–æ 1 —á–∞—Å
      path: "/"
    });
    
    console.log('‚úÖ Set spotify_token cookie');

    // 2. Refresh Token –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access token
    if (tokenData.refresh_token) {
      response.cookies.set("spotify_refresh", tokenData.refresh_token, {
        httpOnly: true,
        secure: true,
        sameSite: "lax",
        maxAge: 60 * 60 * 24 * 365, // 1 –≥–æ–¥
        path: "/"
      });
      console.log('‚úÖ Set spotify_refresh cookie');
    }

    // 3. –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    const expiresAt = new Date(Date.now() + (tokenData.expires_in * 1000));
    response.cookies.set("spotify_expires", expiresAt.toISOString(), {
      httpOnly: false,
      secure: true,
      sameSite: "lax",
      maxAge: tokenData.expires_in || 3600,
      path: "/"
    });
    
    console.log('‚úÖ Token expires at:', expiresAt.toISOString());

    // 4. –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è UI
    const userData = {
      id: profileData.id,
      name: profileData.display_name,
      email: profileData.email,
      image: profileData.images?.[0]?.url,
      product: profileData.product, // free –∏–ª–∏ premium
      country: profileData.country
    };
    
    response.cookies.set("spotify_user", JSON.stringify(userData), {
      httpOnly: false, // –ú–æ–∂–µ–º —á–∏—Ç–∞—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è UI
      secure: true,
      sameSite: "lax",
      maxAge: 60 * 60 * 24 * 30, // 30 –¥–Ω–µ–π
      path: "/"
    });
    
    console.log('‚úÖ Set spotify_user cookie');

    console.log('üéâ Spotify connection complete!', {
      user: profileData.display_name,
      product: profileData.product,
      cookiesSet: ['spotify_token', 'spotify_refresh', 'spotify_expires', 'spotify_user']
    });

    return response;

  } catch (error) {
    console.error("‚ùå Spotify callback error:", error);
    return NextResponse.redirect(`${baseUrl}/profile?error=unknown`);
  }
}