// app/api/spotify/top-items/route.ts
// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤ –∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ Spotify

import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookies
    const spotifyToken = request.cookies.get('spotify_token')?.value;
    
    if (!spotifyToken) {
      console.log('‚ùå No Spotify token found');
      return NextResponse.json({ 
        error: 'Spotify not connected',
        tracks: { items: [] },
        artists: { items: [] }
      }, { status: 401 });
    }

    console.log('üéµ Fetching Spotify top items...');

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ø —Ç—Ä–µ–∫–∏ –∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤
    const [tracksResponse, artistsResponse] = await Promise.all([
      fetch('https://api.spotify.com/v1/me/top/tracks?limit=20&time_range=medium_term', {
        headers: { 'Authorization': `Bearer ${spotifyToken}` }
      }),
      fetch('https://api.spotify.com/v1/me/top/artists?limit=20&time_range=medium_term', {
        headers: { 'Authorization': `Bearer ${spotifyToken}` }
      })
    ]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã
    if (!tracksResponse.ok || !artistsResponse.ok) {
      if (tracksResponse.status === 401 || artistsResponse.status === 401) {
        console.log('‚ùå Spotify token expired');
        return NextResponse.json({ 
          error: 'Token expired',
          requiresAuth: true 
        }, { status: 401 });
      }
      
      console.error('‚ùå Spotify API error');
      return NextResponse.json({ 
        error: 'Failed to fetch data',
        tracks: { items: [] },
        artists: { items: [] }
      }, { status: 500 });
    }

    const tracks = await tracksResponse.json();
    const artists = await artistsResponse.json();

    console.log(`‚úÖ Fetched ${tracks.items?.length || 0} tracks and ${artists.items?.length || 0} artists`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç MusicPortrait
    return NextResponse.json({
      tracks: tracks,
      artists: artists
    });

  } catch (error) {
    console.error('‚ùå Error fetching Spotify data:', error);
    return NextResponse.json({ 
      error: 'Internal server error',
      tracks: { items: [] },
      artists: { items: [] }
    }, { status: 500 });
  }
}