// app/api/spotify/token/route.ts
// Endpoint –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Web Playback SDK

import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ httpOnly cookie
    const spotifyToken = request.cookies.get('spotify_token')?.value;
    const spotifyExpires = request.cookies.get('spotify_expires')?.value;
    const spotifyRefresh = request.cookies.get('spotify_refresh')?.value;
    
    if (!spotifyToken) {
      return NextResponse.json({
        error: 'No Spotify token found',
        requiresAuth: true
      }, { status: 401 });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
    if (spotifyExpires) {
      const expiresAt = new Date(spotifyExpires);
      const now = new Date();
      const minutesLeft = Math.floor((expiresAt.getTime() - now.getTime()) / 1000 / 60);
      
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5 –º–∏–Ω—É—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
      if (minutesLeft < 5 && spotifyRefresh) {
        console.log('üîÑ Token expiring soon, auto-refreshing...');
        
        const CLIENT_ID = process.env.SPOTIFY_CLIENT_ID!;
        const CLIENT_SECRET = process.env.SPOTIFY_CLIENT_SECRET!;
        
        const refreshResponse = await fetch('https://accounts.spotify.com/api/token', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': 'Basic ' + Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString('base64')
          },
          body: new URLSearchParams({
            grant_type: 'refresh_token',
            refresh_token: spotifyRefresh
          })
        });
        
        if (refreshResponse.ok) {
          const data = await refreshResponse.json();
          
          // –°–æ–∑–¥–∞–µ–º response —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
          const response = NextResponse.json({
            token: data.access_token,
            expiresIn: data.expires_in
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º cookies
          response.cookies.set('spotify_token', data.access_token, {
            httpOnly: true,
            secure: true,
            sameSite: 'lax',
            maxAge: data.expires_in || 3600
          });
          
          const newExpiresAt = new Date(Date.now() + (data.expires_in * 1000));
          response.cookies.set('spotify_expires', newExpiresAt.toISOString(), {
            httpOnly: false,
            secure: true,
            sameSite: 'lax',
            maxAge: data.expires_in || 3600
          });
          
          if (data.refresh_token) {
            response.cookies.set('spotify_refresh', data.refresh_token, {
              httpOnly: true,
              secure: true,
              sameSite: 'lax',
              maxAge: 60 * 60 * 24 * 365
            });
          }
          
          console.log('‚úÖ Token refreshed successfully');
          return response;
        }
      }
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
    return NextResponse.json({
      token: spotifyToken,
      expiresAt: spotifyExpires || null
    });
    
  } catch (error) {
    console.error('‚ùå Error getting token:', error);
    return NextResponse.json({
      error: 'Failed to get token'
    }, { status: 500 });
  }
}